// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="hello_world_hello_world,hls_ip_2024_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z007s-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.911000,HLS_SYN_LAT=9,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=23,HLS_SYN_LUT=177,HLS_VERSION=2024_2}" *)

module hello_world (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        valor,
        mensagem_address0,
        mensagem_ce0,
        mensagem_we0,
        mensagem_d0
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] valor;
output  [6:0] mensagem_address0;
output   mensagem_ce0;
output   mensagem_we0;
output  [7:0] mensagem_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[6:0] mensagem_address0;
reg mensagem_ce0;
reg mensagem_we0;
reg[7:0] mensagem_d0;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] icmp_ln4_fu_74_p2;
reg   [0:0] icmp_ln4_reg_80;
wire    grp_hello_world_Pipeline_VITIS_LOOP_7_1_fu_66_ap_start;
wire    grp_hello_world_Pipeline_VITIS_LOOP_7_1_fu_66_ap_done;
wire    grp_hello_world_Pipeline_VITIS_LOOP_7_1_fu_66_ap_idle;
wire    grp_hello_world_Pipeline_VITIS_LOOP_7_1_fu_66_ap_ready;
wire   [6:0] grp_hello_world_Pipeline_VITIS_LOOP_7_1_fu_66_mensagem_address0;
wire    grp_hello_world_Pipeline_VITIS_LOOP_7_1_fu_66_mensagem_ce0;
wire    grp_hello_world_Pipeline_VITIS_LOOP_7_1_fu_66_mensagem_we0;
wire   [7:0] grp_hello_world_Pipeline_VITIS_LOOP_7_1_fu_66_mensagem_d0;
reg    grp_hello_world_Pipeline_VITIS_LOOP_7_1_fu_66_ap_start_reg;
wire    ap_CS_fsm_state2;
wire    mensagem_we0_out;
wire    ap_CS_fsm_state3;
reg    mensagem_we0_local;
reg    mensagem_ce0_local;
reg   [6:0] mensagem_address0_local;
reg   [2:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 grp_hello_world_Pipeline_VITIS_LOOP_7_1_fu_66_ap_start_reg = 1'b0;
end

hello_world_hello_world_Pipeline_VITIS_LOOP_7_1 grp_hello_world_Pipeline_VITIS_LOOP_7_1_fu_66(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_hello_world_Pipeline_VITIS_LOOP_7_1_fu_66_ap_start),
    .ap_done(grp_hello_world_Pipeline_VITIS_LOOP_7_1_fu_66_ap_done),
    .ap_idle(grp_hello_world_Pipeline_VITIS_LOOP_7_1_fu_66_ap_idle),
    .ap_ready(grp_hello_world_Pipeline_VITIS_LOOP_7_1_fu_66_ap_ready),
    .mensagem_address0(grp_hello_world_Pipeline_VITIS_LOOP_7_1_fu_66_mensagem_address0),
    .mensagem_ce0(grp_hello_world_Pipeline_VITIS_LOOP_7_1_fu_66_mensagem_ce0),
    .mensagem_we0(grp_hello_world_Pipeline_VITIS_LOOP_7_1_fu_66_mensagem_we0),
    .mensagem_d0(grp_hello_world_Pipeline_VITIS_LOOP_7_1_fu_66_mensagem_d0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_hello_world_Pipeline_VITIS_LOOP_7_1_fu_66_ap_start_reg <= 1'b0;
    end else begin
        if (((ap_start == 1'b1) & (icmp_ln4_fu_74_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_hello_world_Pipeline_VITIS_LOOP_7_1_fu_66_ap_start_reg <= 1'b1;
        end else if ((grp_hello_world_Pipeline_VITIS_LOOP_7_1_fu_66_ap_ready == 1'b1)) begin
            grp_hello_world_Pipeline_VITIS_LOOP_7_1_fu_66_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        icmp_ln4_reg_80 <= icmp_ln4_fu_74_p2;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_hello_world_Pipeline_VITIS_LOOP_7_1_fu_66_ap_done == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        mensagem_address0 = grp_hello_world_Pipeline_VITIS_LOOP_7_1_fu_66_mensagem_address0;
    end else begin
        mensagem_address0 = mensagem_address0_local;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        mensagem_address0_local = 64'd13;
    end else if (((icmp_ln4_fu_74_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        mensagem_address0_local = 64'd0;
    end else begin
        mensagem_address0_local = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        mensagem_ce0 = grp_hello_world_Pipeline_VITIS_LOOP_7_1_fu_66_mensagem_ce0;
    end else begin
        mensagem_ce0 = mensagem_ce0_local;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((ap_start == 1'b1) & (icmp_ln4_fu_74_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)))) begin
        mensagem_ce0_local = 1'b1;
    end else begin
        mensagem_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        mensagem_d0 = grp_hello_world_Pipeline_VITIS_LOOP_7_1_fu_66_mensagem_d0;
    end else begin
        mensagem_d0 = 8'd0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        mensagem_we0 = grp_hello_world_Pipeline_VITIS_LOOP_7_1_fu_66_mensagem_we0;
    end else begin
        mensagem_we0 = (mensagem_we0_out | 1'b0);
    end
end

always @ (*) begin
    if ((((icmp_ln4_reg_80 == 1'd1) & (1'b1 == ap_CS_fsm_state3)) | ((ap_start == 1'b1) & (icmp_ln4_fu_74_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)))) begin
        mensagem_we0_local = 1'b1;
    end else begin
        mensagem_we0_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (icmp_ln4_fu_74_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else if (((ap_start == 1'b1) & (icmp_ln4_fu_74_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_hello_world_Pipeline_VITIS_LOOP_7_1_fu_66_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign grp_hello_world_Pipeline_VITIS_LOOP_7_1_fu_66_ap_start = grp_hello_world_Pipeline_VITIS_LOOP_7_1_fu_66_ap_start_reg;

assign icmp_ln4_fu_74_p2 = ((valor == 32'd1) ? 1'b1 : 1'b0);

assign mensagem_we0_out = mensagem_we0_local;

endmodule //hello_world
