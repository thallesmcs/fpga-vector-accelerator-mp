// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="soma_soma,hls_ip_2024_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z007s-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.870000,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=15,HLS_VERSION=2024_2}" *)

module soma (
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        A,
        B,
        C,
        C_ap_vld,
        ap_rst
);


input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [6:0] A;
input  [6:0] B;
output  [7:0] C;
output   C_ap_vld;
input   ap_rst;

reg C_ap_vld;

wire  signed [7:0] sext_ln4_1_fu_49_p1;
wire  signed [7:0] sext_ln4_fu_45_p1;
wire    ap_ce_reg;

always @ (*) begin
    if ((ap_start == 1'b1)) begin
        C_ap_vld = 1'b1;
    end else begin
        C_ap_vld = 1'b0;
    end
end

assign C = ($signed(sext_ln4_1_fu_49_p1) + $signed(sext_ln4_fu_45_p1));

assign ap_done = ap_start;

assign ap_idle = 1'b1;

assign ap_ready = ap_start;

assign sext_ln4_1_fu_49_p1 = $signed(B);

assign sext_ln4_fu_45_p1 = $signed(A);

endmodule //soma
