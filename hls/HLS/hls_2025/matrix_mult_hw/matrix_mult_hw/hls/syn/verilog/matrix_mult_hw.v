// ==============================================================
// Generated by Vitis HLS v2025.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="matrix_mult_hw_matrix_mult_hw,hls_ip_2025_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7s50-csga324-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.087000,HLS_SYN_LAT=265,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=7203,HLS_SYN_LUT=4087,HLS_VERSION=2025_1}" *)

module matrix_mult_hw (
        ap_clk,
        ap_rst_n,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 14;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
wire    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_idle_pp0;
wire    ap_ready;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln38_fu_877_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg;
wire    ap_block_pp0_stage0_11001;
reg    ap_loop_exit_ready_delayed;
wire   [3:0] A_0_address0;
wire   [31:0] A_0_q0;
wire   [3:0] A_1_address0;
wire   [31:0] A_1_q0;
wire   [3:0] A_2_address0;
wire   [31:0] A_2_q0;
wire   [3:0] A_3_address0;
wire   [31:0] A_3_q0;
wire   [3:0] A_4_address0;
wire   [31:0] A_4_q0;
wire   [3:0] A_5_address0;
wire   [31:0] A_5_q0;
wire   [3:0] A_6_address0;
wire   [31:0] A_6_q0;
wire   [3:0] A_7_address0;
wire   [31:0] A_7_q0;
wire   [3:0] A_8_address0;
wire   [31:0] A_8_q0;
wire   [3:0] A_9_address0;
wire   [31:0] A_9_q0;
wire   [3:0] A_10_address0;
wire   [31:0] A_10_q0;
wire   [3:0] A_11_address0;
wire   [31:0] A_11_q0;
wire   [3:0] A_12_address0;
wire   [31:0] A_12_q0;
wire   [3:0] A_13_address0;
wire   [31:0] A_13_q0;
wire   [3:0] A_14_address0;
wire   [31:0] A_14_q0;
wire   [3:0] A_15_address0;
wire   [31:0] A_15_q0;
wire   [3:0] B_0_address0;
wire   [31:0] B_0_q0;
wire   [3:0] B_1_address0;
wire   [31:0] B_1_q0;
wire   [3:0] B_2_address0;
wire   [31:0] B_2_q0;
wire   [3:0] B_3_address0;
wire   [31:0] B_3_q0;
wire   [3:0] B_4_address0;
wire   [31:0] B_4_q0;
wire   [3:0] B_5_address0;
wire   [31:0] B_5_q0;
wire   [3:0] B_6_address0;
wire   [31:0] B_6_q0;
wire   [3:0] B_7_address0;
wire   [31:0] B_7_q0;
wire   [3:0] B_8_address0;
wire   [31:0] B_8_q0;
wire   [3:0] B_9_address0;
wire   [31:0] B_9_q0;
wire   [3:0] B_10_address0;
wire   [31:0] B_10_q0;
wire   [3:0] B_11_address0;
wire   [31:0] B_11_q0;
wire   [3:0] B_12_address0;
wire   [31:0] B_12_q0;
wire   [3:0] B_13_address0;
wire   [31:0] B_13_q0;
wire   [3:0] B_14_address0;
wire   [31:0] B_14_q0;
wire   [3:0] B_15_address0;
wire   [31:0] B_15_q0;
wire   [7:0] C_address0;
wire   [7:0] add_ln57_fu_853_p2;
reg   [7:0] add_ln57_reg_1071;
reg   [7:0] add_ln57_reg_1071_pp0_iter1_reg;
reg   [7:0] add_ln57_reg_1071_pp0_iter2_reg;
reg   [7:0] add_ln57_reg_1071_pp0_iter3_reg;
reg   [7:0] add_ln57_reg_1071_pp0_iter4_reg;
reg   [7:0] add_ln57_reg_1071_pp0_iter5_reg;
reg   [7:0] add_ln57_reg_1071_pp0_iter6_reg;
wire   [0:0] icmp_ln39_fu_871_p2;
reg   [0:0] icmp_ln39_reg_1156;
reg   [0:0] icmp_ln38_reg_1161;
reg  signed [31:0] A_0_load_reg_1165;
reg  signed [31:0] A_1_load_reg_1170;
reg  signed [31:0] A_2_load_reg_1175;
reg  signed [31:0] A_3_load_reg_1180;
reg  signed [31:0] A_4_load_reg_1185;
reg  signed [31:0] A_5_load_reg_1190;
reg  signed [31:0] A_6_load_reg_1195;
reg  signed [31:0] A_7_load_reg_1200;
reg  signed [31:0] A_8_load_reg_1205;
reg  signed [31:0] A_9_load_reg_1210;
reg  signed [31:0] A_10_load_reg_1215;
reg  signed [31:0] A_11_load_reg_1220;
reg  signed [31:0] A_12_load_reg_1225;
reg  signed [31:0] A_13_load_reg_1230;
reg  signed [31:0] A_14_load_reg_1235;
reg  signed [31:0] A_15_load_reg_1240;
reg  signed [31:0] B_0_load_reg_1245;
reg  signed [31:0] B_1_load_reg_1250;
reg  signed [31:0] B_2_load_reg_1255;
reg  signed [31:0] B_3_load_reg_1260;
reg  signed [31:0] B_4_load_reg_1265;
reg  signed [31:0] B_5_load_reg_1270;
reg  signed [31:0] B_6_load_reg_1275;
reg  signed [31:0] B_7_load_reg_1280;
reg  signed [31:0] B_8_load_reg_1285;
reg  signed [31:0] B_9_load_reg_1290;
reg  signed [31:0] B_10_load_reg_1295;
reg  signed [31:0] B_11_load_reg_1300;
reg  signed [31:0] B_12_load_reg_1305;
reg  signed [31:0] B_13_load_reg_1310;
reg  signed [31:0] B_14_load_reg_1315;
reg  signed [31:0] B_15_load_reg_1320;
wire   [31:0] grp_fu_687_p2;
reg   [31:0] sum_reg_1325;
wire   [31:0] grp_fu_691_p2;
reg   [31:0] mul_ln55_reg_1330;
wire   [31:0] grp_fu_695_p2;
reg   [31:0] mul_ln55_1_reg_1335;
wire   [31:0] grp_fu_699_p2;
reg   [31:0] mul_ln55_2_reg_1340;
wire   [31:0] grp_fu_703_p2;
reg   [31:0] mul_ln55_3_reg_1345;
wire   [31:0] grp_fu_707_p2;
reg   [31:0] mul_ln55_4_reg_1350;
wire   [31:0] grp_fu_711_p2;
reg   [31:0] mul_ln55_5_reg_1355;
wire   [31:0] grp_fu_715_p2;
reg   [31:0] mul_ln55_6_reg_1360;
wire   [31:0] grp_fu_719_p2;
reg   [31:0] mul_ln55_7_reg_1365;
wire   [31:0] grp_fu_723_p2;
reg   [31:0] mul_ln55_8_reg_1370;
wire   [31:0] grp_fu_727_p2;
reg   [31:0] mul_ln55_9_reg_1375;
wire   [31:0] grp_fu_731_p2;
reg   [31:0] mul_ln55_10_reg_1380;
wire   [31:0] grp_fu_735_p2;
reg   [31:0] mul_ln55_11_reg_1385;
wire   [31:0] grp_fu_739_p2;
reg   [31:0] mul_ln55_12_reg_1390;
wire   [31:0] grp_fu_743_p2;
reg   [31:0] mul_ln55_13_reg_1395;
wire   [31:0] grp_fu_747_p2;
reg   [31:0] mul_ln55_14_reg_1400;
wire   [31:0] add_ln55_2_fu_906_p2;
reg   [31:0] add_ln55_2_reg_1405;
reg   [31:0] add_ln55_2_reg_1405_pp0_iter5_reg;
wire   [31:0] add_ln55_5_fu_920_p2;
reg   [31:0] add_ln55_5_reg_1410;
reg   [31:0] add_ln55_5_reg_1410_pp0_iter5_reg;
wire   [31:0] add_ln55_7_fu_926_p2;
reg   [31:0] add_ln55_7_reg_1415;
wire   [31:0] add_ln55_8_fu_930_p2;
reg   [31:0] add_ln55_8_reg_1420;
wire   [31:0] add_ln55_12_fu_942_p2;
reg   [31:0] add_ln55_12_reg_1425;
wire   [31:0] add_ln55_13_fu_952_p2;
reg   [31:0] add_ln55_13_reg_1430;
wire   [31:0] sum_1_fu_961_p2;
reg   [31:0] sum_1_reg_1435;
reg   [0:0] ap_phi_mux_icmp_ln394_phi_fu_680_p4;
wire    ap_loop_init;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln38_fu_801_p1;
wire   [63:0] zext_ln39_fu_829_p1;
wire   [63:0] zext_ln57_1_fu_966_p1;
reg   [7:0] indvar_flatten1_fu_236;
wire   [7:0] add_ln38_1_fu_865_p2;
reg   [7:0] ap_sig_allocacmp_indvar_flatten1_load;
reg   [4:0] i2_fu_240;
wire   [4:0] i_fu_789_p3;
reg   [4:0] ap_sig_allocacmp_i2_load;
reg   [4:0] j3_fu_244;
wire   [4:0] j_fu_859_p2;
reg   [4:0] ap_sig_allocacmp_j3_load;
reg    A_0_ce0_local;
reg    A_1_ce0_local;
reg    A_2_ce0_local;
reg    A_3_ce0_local;
reg    A_4_ce0_local;
reg    A_5_ce0_local;
reg    A_6_ce0_local;
reg    A_7_ce0_local;
reg    A_8_ce0_local;
reg    A_9_ce0_local;
reg    A_10_ce0_local;
reg    A_11_ce0_local;
reg    A_12_ce0_local;
reg    A_13_ce0_local;
reg    A_14_ce0_local;
reg    A_15_ce0_local;
reg    B_0_ce0_local;
reg    B_1_ce0_local;
reg    B_2_ce0_local;
reg    B_3_ce0_local;
reg    B_4_ce0_local;
reg    B_5_ce0_local;
reg    B_6_ce0_local;
reg    B_7_ce0_local;
reg    B_8_ce0_local;
reg    B_9_ce0_local;
reg    B_10_ce0_local;
reg    B_11_ce0_local;
reg    B_12_ce0_local;
reg    B_13_ce0_local;
reg    B_14_ce0_local;
reg    B_15_ce0_local;
reg    C_we0_local;
reg    C_ce0_local;
wire   [4:0] add_ln38_fu_775_p2;
wire   [3:0] trunc_ln38_fu_797_p1;
wire   [4:0] select_ln38_fu_781_p3;
wire   [7:0] tmp_fu_821_p3;
wire   [7:0] zext_ln57_fu_849_p1;
wire   [31:0] add_ln55_1_fu_902_p2;
wire   [31:0] add_ln55_fu_898_p2;
wire   [31:0] add_ln55_4_fu_916_p2;
wire   [31:0] add_ln55_3_fu_912_p2;
wire   [31:0] add_ln55_11_fu_938_p2;
wire   [31:0] add_ln55_10_fu_934_p2;
wire   [31:0] add_ln55_9_fu_948_p2;
wire   [31:0] add_ln55_6_fu_957_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
reg    ap_condition_982;
reg    ap_condition_319;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 indvar_flatten1_fu_236 = 8'd0;
#0 i2_fu_240 = 5'd0;
#0 j3_fu_244 = 5'd0;
#0 ap_done_reg = 1'b0;
end

matrix_mult_hw_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .A_0_address0(A_0_address0),
    .A_0_ce0(A_0_ce0_local),
    .A_0_q0(A_0_q0),
    .A_1_address0(A_1_address0),
    .A_1_ce0(A_1_ce0_local),
    .A_1_q0(A_1_q0),
    .A_2_address0(A_2_address0),
    .A_2_ce0(A_2_ce0_local),
    .A_2_q0(A_2_q0),
    .A_3_address0(A_3_address0),
    .A_3_ce0(A_3_ce0_local),
    .A_3_q0(A_3_q0),
    .A_4_address0(A_4_address0),
    .A_4_ce0(A_4_ce0_local),
    .A_4_q0(A_4_q0),
    .A_5_address0(A_5_address0),
    .A_5_ce0(A_5_ce0_local),
    .A_5_q0(A_5_q0),
    .A_6_address0(A_6_address0),
    .A_6_ce0(A_6_ce0_local),
    .A_6_q0(A_6_q0),
    .A_7_address0(A_7_address0),
    .A_7_ce0(A_7_ce0_local),
    .A_7_q0(A_7_q0),
    .A_8_address0(A_8_address0),
    .A_8_ce0(A_8_ce0_local),
    .A_8_q0(A_8_q0),
    .A_9_address0(A_9_address0),
    .A_9_ce0(A_9_ce0_local),
    .A_9_q0(A_9_q0),
    .A_10_address0(A_10_address0),
    .A_10_ce0(A_10_ce0_local),
    .A_10_q0(A_10_q0),
    .A_11_address0(A_11_address0),
    .A_11_ce0(A_11_ce0_local),
    .A_11_q0(A_11_q0),
    .A_12_address0(A_12_address0),
    .A_12_ce0(A_12_ce0_local),
    .A_12_q0(A_12_q0),
    .A_13_address0(A_13_address0),
    .A_13_ce0(A_13_ce0_local),
    .A_13_q0(A_13_q0),
    .A_14_address0(A_14_address0),
    .A_14_ce0(A_14_ce0_local),
    .A_14_q0(A_14_q0),
    .A_15_address0(A_15_address0),
    .A_15_ce0(A_15_ce0_local),
    .A_15_q0(A_15_q0),
    .B_0_address0(B_0_address0),
    .B_0_ce0(B_0_ce0_local),
    .B_0_q0(B_0_q0),
    .B_1_address0(B_1_address0),
    .B_1_ce0(B_1_ce0_local),
    .B_1_q0(B_1_q0),
    .B_2_address0(B_2_address0),
    .B_2_ce0(B_2_ce0_local),
    .B_2_q0(B_2_q0),
    .B_3_address0(B_3_address0),
    .B_3_ce0(B_3_ce0_local),
    .B_3_q0(B_3_q0),
    .B_4_address0(B_4_address0),
    .B_4_ce0(B_4_ce0_local),
    .B_4_q0(B_4_q0),
    .B_5_address0(B_5_address0),
    .B_5_ce0(B_5_ce0_local),
    .B_5_q0(B_5_q0),
    .B_6_address0(B_6_address0),
    .B_6_ce0(B_6_ce0_local),
    .B_6_q0(B_6_q0),
    .B_7_address0(B_7_address0),
    .B_7_ce0(B_7_ce0_local),
    .B_7_q0(B_7_q0),
    .B_8_address0(B_8_address0),
    .B_8_ce0(B_8_ce0_local),
    .B_8_q0(B_8_q0),
    .B_9_address0(B_9_address0),
    .B_9_ce0(B_9_ce0_local),
    .B_9_q0(B_9_q0),
    .B_10_address0(B_10_address0),
    .B_10_ce0(B_10_ce0_local),
    .B_10_q0(B_10_q0),
    .B_11_address0(B_11_address0),
    .B_11_ce0(B_11_ce0_local),
    .B_11_q0(B_11_q0),
    .B_12_address0(B_12_address0),
    .B_12_ce0(B_12_ce0_local),
    .B_12_q0(B_12_q0),
    .B_13_address0(B_13_address0),
    .B_13_ce0(B_13_ce0_local),
    .B_13_q0(B_13_q0),
    .B_14_address0(B_14_address0),
    .B_14_ce0(B_14_ce0_local),
    .B_14_q0(B_14_q0),
    .B_15_address0(B_15_address0),
    .B_15_ce0(B_15_ce0_local),
    .B_15_q0(B_15_q0),
    .C_address0(C_address0),
    .C_ce0(C_ce0_local),
    .C_we0(C_we0_local),
    .C_d0(sum_1_reg_1435),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

matrix_mult_hw_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(B_0_load_reg_1245),
    .din1(A_0_load_reg_1165),
    .ce(1'b1),
    .dout(grp_fu_687_p2)
);

matrix_mult_hw_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(B_1_load_reg_1250),
    .din1(A_1_load_reg_1170),
    .ce(1'b1),
    .dout(grp_fu_691_p2)
);

matrix_mult_hw_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(B_2_load_reg_1255),
    .din1(A_2_load_reg_1175),
    .ce(1'b1),
    .dout(grp_fu_695_p2)
);

matrix_mult_hw_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(B_3_load_reg_1260),
    .din1(A_3_load_reg_1180),
    .ce(1'b1),
    .dout(grp_fu_699_p2)
);

matrix_mult_hw_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U5(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(B_4_load_reg_1265),
    .din1(A_4_load_reg_1185),
    .ce(1'b1),
    .dout(grp_fu_703_p2)
);

matrix_mult_hw_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U6(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(B_5_load_reg_1270),
    .din1(A_5_load_reg_1190),
    .ce(1'b1),
    .dout(grp_fu_707_p2)
);

matrix_mult_hw_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U7(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(B_6_load_reg_1275),
    .din1(A_6_load_reg_1195),
    .ce(1'b1),
    .dout(grp_fu_711_p2)
);

matrix_mult_hw_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U8(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(B_7_load_reg_1280),
    .din1(A_7_load_reg_1200),
    .ce(1'b1),
    .dout(grp_fu_715_p2)
);

matrix_mult_hw_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U9(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(B_8_load_reg_1285),
    .din1(A_8_load_reg_1205),
    .ce(1'b1),
    .dout(grp_fu_719_p2)
);

matrix_mult_hw_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U10(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(B_9_load_reg_1290),
    .din1(A_9_load_reg_1210),
    .ce(1'b1),
    .dout(grp_fu_723_p2)
);

matrix_mult_hw_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U11(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(B_10_load_reg_1295),
    .din1(A_10_load_reg_1215),
    .ce(1'b1),
    .dout(grp_fu_727_p2)
);

matrix_mult_hw_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U12(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(B_11_load_reg_1300),
    .din1(A_11_load_reg_1220),
    .ce(1'b1),
    .dout(grp_fu_731_p2)
);

matrix_mult_hw_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U13(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(B_12_load_reg_1305),
    .din1(A_12_load_reg_1225),
    .ce(1'b1),
    .dout(grp_fu_735_p2)
);

matrix_mult_hw_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U14(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(B_13_load_reg_1310),
    .din1(A_13_load_reg_1230),
    .ce(1'b1),
    .dout(grp_fu_739_p2)
);

matrix_mult_hw_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U15(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(B_14_load_reg_1315),
    .din1(A_14_load_reg_1235),
    .ce(1'b1),
    .dout(grp_fu_743_p2)
);

matrix_mult_hw_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U16(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(B_15_load_reg_1320),
    .din1(A_15_load_reg_1240),
    .ce(1'b1),
    .dout(grp_fu_747_p2)
);

matrix_mult_hw_flow_control_loop_delay_pipe flow_control_loop_delay_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(1'b1),
    .ap_loop_exit_ready_delayed(ap_loop_exit_ready_delayed)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter8_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_exit_ready_pp0_iter7_reg == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_loop_exit_ready_pp0_iter8_reg <= 1'b0;
    end else if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_319)) begin
        i2_fu_240 <= i_fu_789_p3;
    end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_319)) begin
    indvar_flatten1_fu_236 <= add_ln38_1_fu_865_p2;
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_319)) begin
    j3_fu_244 <= j_fu_859_p2;
end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_0_load_reg_1165 <= A_0_q0;
        A_10_load_reg_1215 <= A_10_q0;
        A_11_load_reg_1220 <= A_11_q0;
        A_12_load_reg_1225 <= A_12_q0;
        A_13_load_reg_1230 <= A_13_q0;
        A_14_load_reg_1235 <= A_14_q0;
        A_15_load_reg_1240 <= A_15_q0;
        A_1_load_reg_1170 <= A_1_q0;
        A_2_load_reg_1175 <= A_2_q0;
        A_3_load_reg_1180 <= A_3_q0;
        A_4_load_reg_1185 <= A_4_q0;
        A_5_load_reg_1190 <= A_5_q0;
        A_6_load_reg_1195 <= A_6_q0;
        A_7_load_reg_1200 <= A_7_q0;
        A_8_load_reg_1205 <= A_8_q0;
        A_9_load_reg_1210 <= A_9_q0;
        B_0_load_reg_1245 <= B_0_q0;
        B_10_load_reg_1295 <= B_10_q0;
        B_11_load_reg_1300 <= B_11_q0;
        B_12_load_reg_1305 <= B_12_q0;
        B_13_load_reg_1310 <= B_13_q0;
        B_14_load_reg_1315 <= B_14_q0;
        B_15_load_reg_1320 <= B_15_q0;
        B_1_load_reg_1250 <= B_1_q0;
        B_2_load_reg_1255 <= B_2_q0;
        B_3_load_reg_1260 <= B_3_q0;
        B_4_load_reg_1265 <= B_4_q0;
        B_5_load_reg_1270 <= B_5_q0;
        B_6_load_reg_1275 <= B_6_q0;
        B_7_load_reg_1280 <= B_7_q0;
        B_8_load_reg_1285 <= B_8_q0;
        B_9_load_reg_1290 <= B_9_q0;
        add_ln57_reg_1071 <= add_ln57_fu_853_p2;
        add_ln57_reg_1071_pp0_iter1_reg <= add_ln57_reg_1071;
        ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg <= ap_condition_exit_pp0_iter0_stage0;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln38_reg_1161 <= icmp_ln38_fu_877_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln55_12_reg_1425 <= add_ln55_12_fu_942_p2;
        add_ln55_13_reg_1430 <= add_ln55_13_fu_952_p2;
        add_ln55_2_reg_1405 <= add_ln55_2_fu_906_p2;
        add_ln55_2_reg_1405_pp0_iter5_reg <= add_ln55_2_reg_1405;
        add_ln55_5_reg_1410 <= add_ln55_5_fu_920_p2;
        add_ln55_5_reg_1410_pp0_iter5_reg <= add_ln55_5_reg_1410;
        add_ln55_7_reg_1415 <= add_ln55_7_fu_926_p2;
        add_ln55_8_reg_1420 <= add_ln55_8_fu_930_p2;
        add_ln57_reg_1071_pp0_iter2_reg <= add_ln57_reg_1071_pp0_iter1_reg;
        add_ln57_reg_1071_pp0_iter3_reg <= add_ln57_reg_1071_pp0_iter2_reg;
        add_ln57_reg_1071_pp0_iter4_reg <= add_ln57_reg_1071_pp0_iter3_reg;
        add_ln57_reg_1071_pp0_iter5_reg <= add_ln57_reg_1071_pp0_iter4_reg;
        add_ln57_reg_1071_pp0_iter6_reg <= add_ln57_reg_1071_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        mul_ln55_10_reg_1380 <= grp_fu_731_p2;
        mul_ln55_11_reg_1385 <= grp_fu_735_p2;
        mul_ln55_12_reg_1390 <= grp_fu_739_p2;
        mul_ln55_13_reg_1395 <= grp_fu_743_p2;
        mul_ln55_14_reg_1400 <= grp_fu_747_p2;
        mul_ln55_1_reg_1335 <= grp_fu_695_p2;
        mul_ln55_2_reg_1340 <= grp_fu_699_p2;
        mul_ln55_3_reg_1345 <= grp_fu_703_p2;
        mul_ln55_4_reg_1350 <= grp_fu_707_p2;
        mul_ln55_5_reg_1355 <= grp_fu_711_p2;
        mul_ln55_6_reg_1360 <= grp_fu_715_p2;
        mul_ln55_7_reg_1365 <= grp_fu_719_p2;
        mul_ln55_8_reg_1370 <= grp_fu_723_p2;
        mul_ln55_9_reg_1375 <= grp_fu_727_p2;
        mul_ln55_reg_1330 <= grp_fu_691_p2;
        sum_1_reg_1435 <= sum_1_fu_961_p2;
        sum_reg_1325 <= grp_fu_687_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln39_reg_1156 <= icmp_ln39_fu_871_p2;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_0_ce0_local = 1'b1;
    end else begin
        A_0_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_10_ce0_local = 1'b1;
    end else begin
        A_10_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_11_ce0_local = 1'b1;
    end else begin
        A_11_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_12_ce0_local = 1'b1;
    end else begin
        A_12_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_13_ce0_local = 1'b1;
    end else begin
        A_13_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_14_ce0_local = 1'b1;
    end else begin
        A_14_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_15_ce0_local = 1'b1;
    end else begin
        A_15_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_1_ce0_local = 1'b1;
    end else begin
        A_1_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_2_ce0_local = 1'b1;
    end else begin
        A_2_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_3_ce0_local = 1'b1;
    end else begin
        A_3_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_4_ce0_local = 1'b1;
    end else begin
        A_4_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_5_ce0_local = 1'b1;
    end else begin
        A_5_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_6_ce0_local = 1'b1;
    end else begin
        A_6_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_7_ce0_local = 1'b1;
    end else begin
        A_7_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_8_ce0_local = 1'b1;
    end else begin
        A_8_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_9_ce0_local = 1'b1;
    end else begin
        A_9_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        B_0_ce0_local = 1'b1;
    end else begin
        B_0_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        B_10_ce0_local = 1'b1;
    end else begin
        B_10_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        B_11_ce0_local = 1'b1;
    end else begin
        B_11_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        B_12_ce0_local = 1'b1;
    end else begin
        B_12_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        B_13_ce0_local = 1'b1;
    end else begin
        B_13_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        B_14_ce0_local = 1'b1;
    end else begin
        B_14_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        B_15_ce0_local = 1'b1;
    end else begin
        B_15_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        B_1_ce0_local = 1'b1;
    end else begin
        B_1_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        B_2_ce0_local = 1'b1;
    end else begin
        B_2_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        B_3_ce0_local = 1'b1;
    end else begin
        B_3_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        B_4_ce0_local = 1'b1;
    end else begin
        B_4_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        B_5_ce0_local = 1'b1;
    end else begin
        B_5_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        B_6_ce0_local = 1'b1;
    end else begin
        B_6_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        B_7_ce0_local = 1'b1;
    end else begin
        B_7_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        B_8_ce0_local = 1'b1;
    end else begin
        B_8_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        B_9_ce0_local = 1'b1;
    end else begin
        B_9_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1)))) begin
        C_ce0_local = 1'b1;
    end else begin
        C_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        C_we0_local = 1'b1;
    end else begin
        C_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln38_fu_877_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter8_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_delayed = 1'b1;
    end else begin
        ap_loop_exit_ready_delayed = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        if ((1'b1 == ap_condition_982)) begin
            ap_phi_mux_icmp_ln394_phi_fu_680_p4 = icmp_ln39_reg_1156;
        end else if ((ap_loop_init == 1'b1)) begin
            ap_phi_mux_icmp_ln394_phi_fu_680_p4 = 1'd0;
        end else begin
            ap_phi_mux_icmp_ln394_phi_fu_680_p4 = icmp_ln39_reg_1156;
        end
    end else begin
        ap_phi_mux_icmp_ln394_phi_fu_680_p4 = icmp_ln39_reg_1156;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i2_load = 5'd0;
    end else begin
        ap_sig_allocacmp_i2_load = i2_fu_240;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten1_load = 8'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten1_load = indvar_flatten1_fu_236;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_j3_load = 5'd0;
    end else begin
        ap_sig_allocacmp_j3_load = j3_fu_244;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_0_address0 = zext_ln38_fu_801_p1;

assign A_10_address0 = zext_ln38_fu_801_p1;

assign A_11_address0 = zext_ln38_fu_801_p1;

assign A_12_address0 = zext_ln38_fu_801_p1;

assign A_13_address0 = zext_ln38_fu_801_p1;

assign A_14_address0 = zext_ln38_fu_801_p1;

assign A_15_address0 = zext_ln38_fu_801_p1;

assign A_1_address0 = zext_ln38_fu_801_p1;

assign A_2_address0 = zext_ln38_fu_801_p1;

assign A_3_address0 = zext_ln38_fu_801_p1;

assign A_4_address0 = zext_ln38_fu_801_p1;

assign A_5_address0 = zext_ln38_fu_801_p1;

assign A_6_address0 = zext_ln38_fu_801_p1;

assign A_7_address0 = zext_ln38_fu_801_p1;

assign A_8_address0 = zext_ln38_fu_801_p1;

assign A_9_address0 = zext_ln38_fu_801_p1;

assign B_0_address0 = zext_ln39_fu_829_p1;

assign B_10_address0 = zext_ln39_fu_829_p1;

assign B_11_address0 = zext_ln39_fu_829_p1;

assign B_12_address0 = zext_ln39_fu_829_p1;

assign B_13_address0 = zext_ln39_fu_829_p1;

assign B_14_address0 = zext_ln39_fu_829_p1;

assign B_15_address0 = zext_ln39_fu_829_p1;

assign B_1_address0 = zext_ln39_fu_829_p1;

assign B_2_address0 = zext_ln39_fu_829_p1;

assign B_3_address0 = zext_ln39_fu_829_p1;

assign B_4_address0 = zext_ln39_fu_829_p1;

assign B_5_address0 = zext_ln39_fu_829_p1;

assign B_6_address0 = zext_ln39_fu_829_p1;

assign B_7_address0 = zext_ln39_fu_829_p1;

assign B_8_address0 = zext_ln39_fu_829_p1;

assign B_9_address0 = zext_ln39_fu_829_p1;

assign C_address0 = zext_ln57_1_fu_966_p1;

assign add_ln38_1_fu_865_p2 = (ap_sig_allocacmp_indvar_flatten1_load + 8'd1);

assign add_ln38_fu_775_p2 = (ap_sig_allocacmp_i2_load + 5'd1);

assign add_ln55_10_fu_934_p2 = (mul_ln55_11_reg_1385 + mul_ln55_12_reg_1390);

assign add_ln55_11_fu_938_p2 = (mul_ln55_13_reg_1395 + mul_ln55_14_reg_1400);

assign add_ln55_12_fu_942_p2 = (add_ln55_11_fu_938_p2 + add_ln55_10_fu_934_p2);

assign add_ln55_13_fu_952_p2 = (add_ln55_12_reg_1425 + add_ln55_9_fu_948_p2);

assign add_ln55_1_fu_902_p2 = (mul_ln55_1_reg_1335 + mul_ln55_2_reg_1340);

assign add_ln55_2_fu_906_p2 = (add_ln55_1_fu_902_p2 + add_ln55_fu_898_p2);

assign add_ln55_3_fu_912_p2 = (mul_ln55_3_reg_1345 + mul_ln55_4_reg_1350);

assign add_ln55_4_fu_916_p2 = (mul_ln55_5_reg_1355 + mul_ln55_6_reg_1360);

assign add_ln55_5_fu_920_p2 = (add_ln55_4_fu_916_p2 + add_ln55_3_fu_912_p2);

assign add_ln55_6_fu_957_p2 = (add_ln55_5_reg_1410_pp0_iter5_reg + add_ln55_2_reg_1405_pp0_iter5_reg);

assign add_ln55_7_fu_926_p2 = (mul_ln55_7_reg_1365 + mul_ln55_8_reg_1370);

assign add_ln55_8_fu_930_p2 = (mul_ln55_9_reg_1375 + mul_ln55_10_reg_1380);

assign add_ln55_9_fu_948_p2 = (add_ln55_8_reg_1420 + add_ln55_7_reg_1415);

assign add_ln55_fu_898_p2 = (mul_ln55_reg_1330 + sum_reg_1325);

assign add_ln57_fu_853_p2 = (tmp_fu_821_p3 + zext_ln57_fu_849_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_319 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_982 = ((1'b0 == ap_block_pp0_stage0) & (icmp_ln38_reg_1161 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign i_fu_789_p3 = ((ap_phi_mux_icmp_ln394_phi_fu_680_p4[0:0] == 1'b1) ? add_ln38_fu_775_p2 : ap_sig_allocacmp_i2_load);

assign icmp_ln38_fu_877_p2 = ((ap_sig_allocacmp_indvar_flatten1_load == 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln39_fu_871_p2 = ((j_fu_859_p2 == 5'd16) ? 1'b1 : 1'b0);

assign j_fu_859_p2 = (select_ln38_fu_781_p3 + 5'd1);

assign select_ln38_fu_781_p3 = ((ap_phi_mux_icmp_ln394_phi_fu_680_p4[0:0] == 1'b1) ? 5'd0 : ap_sig_allocacmp_j3_load);

assign sum_1_fu_961_p2 = (add_ln55_13_reg_1430 + add_ln55_6_fu_957_p2);

assign tmp_fu_821_p3 = {{trunc_ln38_fu_797_p1}, {4'd0}};

assign trunc_ln38_fu_797_p1 = i_fu_789_p3[3:0];

assign zext_ln38_fu_801_p1 = i_fu_789_p3;

assign zext_ln39_fu_829_p1 = select_ln38_fu_781_p3;

assign zext_ln57_1_fu_966_p1 = add_ln57_reg_1071_pp0_iter6_reg;

assign zext_ln57_fu_849_p1 = select_ln38_fu_781_p3;

endmodule //matrix_mult_hw
