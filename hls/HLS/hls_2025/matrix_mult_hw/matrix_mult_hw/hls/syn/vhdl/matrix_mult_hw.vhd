-- ==============================================================
-- Generated by Vitis HLS v2025.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matrix_mult_hw is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 14;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of matrix_mult_hw is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "matrix_mult_hw_matrix_mult_hw,hls_ip_2025_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7s50-csga324-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.087000,HLS_SYN_LAT=265,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=7203,HLS_SYN_LUT=4087,HLS_VERSION=2025_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant C_S_AXI_DATA_WIDTH : INTEGER := 32;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln38_fu_877_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_loop_exit_ready_delayed : STD_LOGIC;
    signal A_0_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal A_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_1_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal A_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_2_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal A_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_3_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal A_3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_4_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal A_4_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_5_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal A_5_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_6_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal A_6_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_7_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal A_7_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_8_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal A_8_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_9_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal A_9_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_10_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal A_10_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_11_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal A_11_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_12_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal A_12_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_13_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal A_13_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_14_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal A_14_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_15_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal A_15_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_0_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal B_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_1_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal B_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_2_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal B_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_3_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal B_3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_4_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal B_4_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_5_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal B_5_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_6_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal B_6_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_7_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal B_7_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_8_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal B_8_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_9_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal B_9_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_10_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal B_10_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_11_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal B_11_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_12_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal B_12_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_13_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal B_13_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_14_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal B_14_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_15_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal B_15_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal C_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln57_fu_853_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln57_reg_1071 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln57_reg_1071_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln57_reg_1071_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln57_reg_1071_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln57_reg_1071_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln57_reg_1071_pp0_iter5_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln57_reg_1071_pp0_iter6_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln39_fu_871_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln39_reg_1156 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_reg_1161 : STD_LOGIC_VECTOR (0 downto 0);
    signal A_0_load_reg_1165 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_1_load_reg_1170 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_2_load_reg_1175 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_3_load_reg_1180 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_4_load_reg_1185 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_5_load_reg_1190 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_6_load_reg_1195 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_7_load_reg_1200 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_8_load_reg_1205 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_9_load_reg_1210 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_10_load_reg_1215 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_11_load_reg_1220 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_12_load_reg_1225 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_13_load_reg_1230 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_14_load_reg_1235 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_15_load_reg_1240 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_0_load_reg_1245 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_1_load_reg_1250 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_2_load_reg_1255 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_3_load_reg_1260 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_4_load_reg_1265 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_5_load_reg_1270 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_6_load_reg_1275 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_7_load_reg_1280 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_8_load_reg_1285 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_9_load_reg_1290 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_10_load_reg_1295 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_11_load_reg_1300 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_12_load_reg_1305 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_13_load_reg_1310 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_14_load_reg_1315 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_15_load_reg_1320 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_687_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_reg_1325 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_691_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln55_reg_1330 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_695_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln55_1_reg_1335 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_699_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln55_2_reg_1340 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_703_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln55_3_reg_1345 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_707_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln55_4_reg_1350 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_711_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln55_5_reg_1355 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_715_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln55_6_reg_1360 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_719_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln55_7_reg_1365 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_723_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln55_8_reg_1370 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_727_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln55_9_reg_1375 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_731_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln55_10_reg_1380 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_735_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln55_11_reg_1385 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_739_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln55_12_reg_1390 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_743_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln55_13_reg_1395 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_747_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln55_14_reg_1400 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln55_2_fu_906_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln55_2_reg_1405 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln55_2_reg_1405_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln55_5_fu_920_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln55_5_reg_1410 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln55_5_reg_1410_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln55_7_fu_926_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln55_7_reg_1415 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln55_8_fu_930_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln55_8_reg_1420 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln55_12_fu_942_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln55_12_reg_1425 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln55_13_fu_952_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln55_13_reg_1430 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_1_fu_961_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_1_reg_1435 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_icmp_ln394_phi_fu_680_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln38_fu_801_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln39_fu_829_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln57_1_fu_966_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal indvar_flatten1_fu_236 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal add_ln38_1_fu_865_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_allocacmp_indvar_flatten1_load : STD_LOGIC_VECTOR (7 downto 0);
    signal i2_fu_240 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal i_fu_789_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_allocacmp_i2_load : STD_LOGIC_VECTOR (4 downto 0);
    signal j3_fu_244 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal j_fu_859_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_allocacmp_j3_load : STD_LOGIC_VECTOR (4 downto 0);
    signal A_0_ce0_local : STD_LOGIC;
    signal A_1_ce0_local : STD_LOGIC;
    signal A_2_ce0_local : STD_LOGIC;
    signal A_3_ce0_local : STD_LOGIC;
    signal A_4_ce0_local : STD_LOGIC;
    signal A_5_ce0_local : STD_LOGIC;
    signal A_6_ce0_local : STD_LOGIC;
    signal A_7_ce0_local : STD_LOGIC;
    signal A_8_ce0_local : STD_LOGIC;
    signal A_9_ce0_local : STD_LOGIC;
    signal A_10_ce0_local : STD_LOGIC;
    signal A_11_ce0_local : STD_LOGIC;
    signal A_12_ce0_local : STD_LOGIC;
    signal A_13_ce0_local : STD_LOGIC;
    signal A_14_ce0_local : STD_LOGIC;
    signal A_15_ce0_local : STD_LOGIC;
    signal B_0_ce0_local : STD_LOGIC;
    signal B_1_ce0_local : STD_LOGIC;
    signal B_2_ce0_local : STD_LOGIC;
    signal B_3_ce0_local : STD_LOGIC;
    signal B_4_ce0_local : STD_LOGIC;
    signal B_5_ce0_local : STD_LOGIC;
    signal B_6_ce0_local : STD_LOGIC;
    signal B_7_ce0_local : STD_LOGIC;
    signal B_8_ce0_local : STD_LOGIC;
    signal B_9_ce0_local : STD_LOGIC;
    signal B_10_ce0_local : STD_LOGIC;
    signal B_11_ce0_local : STD_LOGIC;
    signal B_12_ce0_local : STD_LOGIC;
    signal B_13_ce0_local : STD_LOGIC;
    signal B_14_ce0_local : STD_LOGIC;
    signal B_15_ce0_local : STD_LOGIC;
    signal C_we0_local : STD_LOGIC;
    signal C_ce0_local : STD_LOGIC;
    signal add_ln38_fu_775_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln38_fu_797_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln38_fu_781_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_fu_821_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln57_fu_849_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln55_1_fu_902_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln55_fu_898_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln55_4_fu_916_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln55_3_fu_912_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln55_11_fu_938_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln55_10_fu_934_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln55_9_fu_948_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln55_6_fu_957_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_condition_982 : BOOLEAN;
    signal ap_condition_319 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component matrix_mult_hw_mul_32s_32s_32_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component matrix_mult_hw_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        A_0_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        A_0_ce0 : IN STD_LOGIC;
        A_0_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_1_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        A_1_ce0 : IN STD_LOGIC;
        A_1_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_2_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        A_2_ce0 : IN STD_LOGIC;
        A_2_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_3_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        A_3_ce0 : IN STD_LOGIC;
        A_3_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_4_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        A_4_ce0 : IN STD_LOGIC;
        A_4_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_5_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        A_5_ce0 : IN STD_LOGIC;
        A_5_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_6_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        A_6_ce0 : IN STD_LOGIC;
        A_6_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_7_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        A_7_ce0 : IN STD_LOGIC;
        A_7_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_8_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        A_8_ce0 : IN STD_LOGIC;
        A_8_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_9_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        A_9_ce0 : IN STD_LOGIC;
        A_9_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_10_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        A_10_ce0 : IN STD_LOGIC;
        A_10_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_11_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        A_11_ce0 : IN STD_LOGIC;
        A_11_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_12_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        A_12_ce0 : IN STD_LOGIC;
        A_12_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_13_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        A_13_ce0 : IN STD_LOGIC;
        A_13_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_14_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        A_14_ce0 : IN STD_LOGIC;
        A_14_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_15_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        A_15_ce0 : IN STD_LOGIC;
        A_15_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        B_0_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        B_0_ce0 : IN STD_LOGIC;
        B_0_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        B_1_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        B_1_ce0 : IN STD_LOGIC;
        B_1_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        B_2_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        B_2_ce0 : IN STD_LOGIC;
        B_2_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        B_3_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        B_3_ce0 : IN STD_LOGIC;
        B_3_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        B_4_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        B_4_ce0 : IN STD_LOGIC;
        B_4_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        B_5_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        B_5_ce0 : IN STD_LOGIC;
        B_5_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        B_6_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        B_6_ce0 : IN STD_LOGIC;
        B_6_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        B_7_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        B_7_ce0 : IN STD_LOGIC;
        B_7_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        B_8_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        B_8_ce0 : IN STD_LOGIC;
        B_8_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        B_9_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        B_9_ce0 : IN STD_LOGIC;
        B_9_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        B_10_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        B_10_ce0 : IN STD_LOGIC;
        B_10_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        B_11_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        B_11_ce0 : IN STD_LOGIC;
        B_11_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        B_12_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        B_12_ce0 : IN STD_LOGIC;
        B_12_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        B_13_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        B_13_ce0 : IN STD_LOGIC;
        B_13_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        B_14_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        B_14_ce0 : IN STD_LOGIC;
        B_14_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        B_15_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        B_15_ce0 : IN STD_LOGIC;
        B_15_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        C_ce0 : IN STD_LOGIC;
        C_we0 : IN STD_LOGIC;
        C_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component matrix_mult_hw_flow_control_loop_delay_pipe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_loop_exit_ready_delayed : IN STD_LOGIC );
    end component;



begin
    control_s_axi_U : component matrix_mult_hw_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        A_0_address0 => A_0_address0,
        A_0_ce0 => A_0_ce0_local,
        A_0_q0 => A_0_q0,
        A_1_address0 => A_1_address0,
        A_1_ce0 => A_1_ce0_local,
        A_1_q0 => A_1_q0,
        A_2_address0 => A_2_address0,
        A_2_ce0 => A_2_ce0_local,
        A_2_q0 => A_2_q0,
        A_3_address0 => A_3_address0,
        A_3_ce0 => A_3_ce0_local,
        A_3_q0 => A_3_q0,
        A_4_address0 => A_4_address0,
        A_4_ce0 => A_4_ce0_local,
        A_4_q0 => A_4_q0,
        A_5_address0 => A_5_address0,
        A_5_ce0 => A_5_ce0_local,
        A_5_q0 => A_5_q0,
        A_6_address0 => A_6_address0,
        A_6_ce0 => A_6_ce0_local,
        A_6_q0 => A_6_q0,
        A_7_address0 => A_7_address0,
        A_7_ce0 => A_7_ce0_local,
        A_7_q0 => A_7_q0,
        A_8_address0 => A_8_address0,
        A_8_ce0 => A_8_ce0_local,
        A_8_q0 => A_8_q0,
        A_9_address0 => A_9_address0,
        A_9_ce0 => A_9_ce0_local,
        A_9_q0 => A_9_q0,
        A_10_address0 => A_10_address0,
        A_10_ce0 => A_10_ce0_local,
        A_10_q0 => A_10_q0,
        A_11_address0 => A_11_address0,
        A_11_ce0 => A_11_ce0_local,
        A_11_q0 => A_11_q0,
        A_12_address0 => A_12_address0,
        A_12_ce0 => A_12_ce0_local,
        A_12_q0 => A_12_q0,
        A_13_address0 => A_13_address0,
        A_13_ce0 => A_13_ce0_local,
        A_13_q0 => A_13_q0,
        A_14_address0 => A_14_address0,
        A_14_ce0 => A_14_ce0_local,
        A_14_q0 => A_14_q0,
        A_15_address0 => A_15_address0,
        A_15_ce0 => A_15_ce0_local,
        A_15_q0 => A_15_q0,
        B_0_address0 => B_0_address0,
        B_0_ce0 => B_0_ce0_local,
        B_0_q0 => B_0_q0,
        B_1_address0 => B_1_address0,
        B_1_ce0 => B_1_ce0_local,
        B_1_q0 => B_1_q0,
        B_2_address0 => B_2_address0,
        B_2_ce0 => B_2_ce0_local,
        B_2_q0 => B_2_q0,
        B_3_address0 => B_3_address0,
        B_3_ce0 => B_3_ce0_local,
        B_3_q0 => B_3_q0,
        B_4_address0 => B_4_address0,
        B_4_ce0 => B_4_ce0_local,
        B_4_q0 => B_4_q0,
        B_5_address0 => B_5_address0,
        B_5_ce0 => B_5_ce0_local,
        B_5_q0 => B_5_q0,
        B_6_address0 => B_6_address0,
        B_6_ce0 => B_6_ce0_local,
        B_6_q0 => B_6_q0,
        B_7_address0 => B_7_address0,
        B_7_ce0 => B_7_ce0_local,
        B_7_q0 => B_7_q0,
        B_8_address0 => B_8_address0,
        B_8_ce0 => B_8_ce0_local,
        B_8_q0 => B_8_q0,
        B_9_address0 => B_9_address0,
        B_9_ce0 => B_9_ce0_local,
        B_9_q0 => B_9_q0,
        B_10_address0 => B_10_address0,
        B_10_ce0 => B_10_ce0_local,
        B_10_q0 => B_10_q0,
        B_11_address0 => B_11_address0,
        B_11_ce0 => B_11_ce0_local,
        B_11_q0 => B_11_q0,
        B_12_address0 => B_12_address0,
        B_12_ce0 => B_12_ce0_local,
        B_12_q0 => B_12_q0,
        B_13_address0 => B_13_address0,
        B_13_ce0 => B_13_ce0_local,
        B_13_q0 => B_13_q0,
        B_14_address0 => B_14_address0,
        B_14_ce0 => B_14_ce0_local,
        B_14_q0 => B_14_q0,
        B_15_address0 => B_15_address0,
        B_15_ce0 => B_15_ce0_local,
        B_15_q0 => B_15_q0,
        C_address0 => C_address0,
        C_ce0 => C_ce0_local,
        C_we0 => C_we0_local,
        C_d0 => sum_1_reg_1435,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    mul_32s_32s_32_2_1_U1 : component matrix_mult_hw_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => B_0_load_reg_1245,
        din1 => A_0_load_reg_1165,
        ce => ap_const_logic_1,
        dout => grp_fu_687_p2);

    mul_32s_32s_32_2_1_U2 : component matrix_mult_hw_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => B_1_load_reg_1250,
        din1 => A_1_load_reg_1170,
        ce => ap_const_logic_1,
        dout => grp_fu_691_p2);

    mul_32s_32s_32_2_1_U3 : component matrix_mult_hw_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => B_2_load_reg_1255,
        din1 => A_2_load_reg_1175,
        ce => ap_const_logic_1,
        dout => grp_fu_695_p2);

    mul_32s_32s_32_2_1_U4 : component matrix_mult_hw_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => B_3_load_reg_1260,
        din1 => A_3_load_reg_1180,
        ce => ap_const_logic_1,
        dout => grp_fu_699_p2);

    mul_32s_32s_32_2_1_U5 : component matrix_mult_hw_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => B_4_load_reg_1265,
        din1 => A_4_load_reg_1185,
        ce => ap_const_logic_1,
        dout => grp_fu_703_p2);

    mul_32s_32s_32_2_1_U6 : component matrix_mult_hw_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => B_5_load_reg_1270,
        din1 => A_5_load_reg_1190,
        ce => ap_const_logic_1,
        dout => grp_fu_707_p2);

    mul_32s_32s_32_2_1_U7 : component matrix_mult_hw_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => B_6_load_reg_1275,
        din1 => A_6_load_reg_1195,
        ce => ap_const_logic_1,
        dout => grp_fu_711_p2);

    mul_32s_32s_32_2_1_U8 : component matrix_mult_hw_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => B_7_load_reg_1280,
        din1 => A_7_load_reg_1200,
        ce => ap_const_logic_1,
        dout => grp_fu_715_p2);

    mul_32s_32s_32_2_1_U9 : component matrix_mult_hw_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => B_8_load_reg_1285,
        din1 => A_8_load_reg_1205,
        ce => ap_const_logic_1,
        dout => grp_fu_719_p2);

    mul_32s_32s_32_2_1_U10 : component matrix_mult_hw_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => B_9_load_reg_1290,
        din1 => A_9_load_reg_1210,
        ce => ap_const_logic_1,
        dout => grp_fu_723_p2);

    mul_32s_32s_32_2_1_U11 : component matrix_mult_hw_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => B_10_load_reg_1295,
        din1 => A_10_load_reg_1215,
        ce => ap_const_logic_1,
        dout => grp_fu_727_p2);

    mul_32s_32s_32_2_1_U12 : component matrix_mult_hw_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => B_11_load_reg_1300,
        din1 => A_11_load_reg_1220,
        ce => ap_const_logic_1,
        dout => grp_fu_731_p2);

    mul_32s_32s_32_2_1_U13 : component matrix_mult_hw_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => B_12_load_reg_1305,
        din1 => A_12_load_reg_1225,
        ce => ap_const_logic_1,
        dout => grp_fu_735_p2);

    mul_32s_32s_32_2_1_U14 : component matrix_mult_hw_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => B_13_load_reg_1310,
        din1 => A_13_load_reg_1230,
        ce => ap_const_logic_1,
        dout => grp_fu_739_p2);

    mul_32s_32s_32_2_1_U15 : component matrix_mult_hw_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => B_14_load_reg_1315,
        din1 => A_14_load_reg_1235,
        ce => ap_const_logic_1,
        dout => grp_fu_743_p2);

    mul_32s_32s_32_2_1_U16 : component matrix_mult_hw_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => B_15_load_reg_1320,
        din1 => A_15_load_reg_1240,
        ce => ap_const_logic_1,
        dout => grp_fu_747_p2);

    flow_control_loop_delay_pipe_U : component matrix_mult_hw_flow_control_loop_delay_pipe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int,
        ap_continue => ap_const_logic_1,
        ap_loop_exit_ready_delayed => ap_loop_exit_ready_delayed);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter8_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter8_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_exit_ready_pp0_iter7_reg = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                ap_loop_exit_ready_pp0_iter8_reg <= ap_const_logic_0;
            elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
            end if; 
        end if;
    end process;

    i2_fu_240_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_319)) then
                i2_fu_240 <= i_fu_789_p3;
            end if;
        end if;
    end process;

    indvar_flatten1_fu_236_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_319)) then
                indvar_flatten1_fu_236 <= add_ln38_1_fu_865_p2;
            end if;
        end if;
    end process;

    j3_fu_244_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_319)) then
                j3_fu_244 <= j_fu_859_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                A_0_load_reg_1165 <= A_0_q0;
                A_10_load_reg_1215 <= A_10_q0;
                A_11_load_reg_1220 <= A_11_q0;
                A_12_load_reg_1225 <= A_12_q0;
                A_13_load_reg_1230 <= A_13_q0;
                A_14_load_reg_1235 <= A_14_q0;
                A_15_load_reg_1240 <= A_15_q0;
                A_1_load_reg_1170 <= A_1_q0;
                A_2_load_reg_1175 <= A_2_q0;
                A_3_load_reg_1180 <= A_3_q0;
                A_4_load_reg_1185 <= A_4_q0;
                A_5_load_reg_1190 <= A_5_q0;
                A_6_load_reg_1195 <= A_6_q0;
                A_7_load_reg_1200 <= A_7_q0;
                A_8_load_reg_1205 <= A_8_q0;
                A_9_load_reg_1210 <= A_9_q0;
                B_0_load_reg_1245 <= B_0_q0;
                B_10_load_reg_1295 <= B_10_q0;
                B_11_load_reg_1300 <= B_11_q0;
                B_12_load_reg_1305 <= B_12_q0;
                B_13_load_reg_1310 <= B_13_q0;
                B_14_load_reg_1315 <= B_14_q0;
                B_15_load_reg_1320 <= B_15_q0;
                B_1_load_reg_1250 <= B_1_q0;
                B_2_load_reg_1255 <= B_2_q0;
                B_3_load_reg_1260 <= B_3_q0;
                B_4_load_reg_1265 <= B_4_q0;
                B_5_load_reg_1270 <= B_5_q0;
                B_6_load_reg_1275 <= B_6_q0;
                B_7_load_reg_1280 <= B_7_q0;
                B_8_load_reg_1285 <= B_8_q0;
                B_9_load_reg_1290 <= B_9_q0;
                add_ln57_reg_1071 <= add_ln57_fu_853_p2;
                add_ln57_reg_1071_pp0_iter1_reg <= add_ln57_reg_1071;
                ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg <= ap_condition_exit_pp0_iter0_stage0;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                icmp_ln38_reg_1161 <= icmp_ln38_fu_877_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln55_12_reg_1425 <= add_ln55_12_fu_942_p2;
                add_ln55_13_reg_1430 <= add_ln55_13_fu_952_p2;
                add_ln55_2_reg_1405 <= add_ln55_2_fu_906_p2;
                add_ln55_2_reg_1405_pp0_iter5_reg <= add_ln55_2_reg_1405;
                add_ln55_5_reg_1410 <= add_ln55_5_fu_920_p2;
                add_ln55_5_reg_1410_pp0_iter5_reg <= add_ln55_5_reg_1410;
                add_ln55_7_reg_1415 <= add_ln55_7_fu_926_p2;
                add_ln55_8_reg_1420 <= add_ln55_8_fu_930_p2;
                add_ln57_reg_1071_pp0_iter2_reg <= add_ln57_reg_1071_pp0_iter1_reg;
                add_ln57_reg_1071_pp0_iter3_reg <= add_ln57_reg_1071_pp0_iter2_reg;
                add_ln57_reg_1071_pp0_iter4_reg <= add_ln57_reg_1071_pp0_iter3_reg;
                add_ln57_reg_1071_pp0_iter5_reg <= add_ln57_reg_1071_pp0_iter4_reg;
                add_ln57_reg_1071_pp0_iter6_reg <= add_ln57_reg_1071_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                mul_ln55_10_reg_1380 <= grp_fu_731_p2;
                mul_ln55_11_reg_1385 <= grp_fu_735_p2;
                mul_ln55_12_reg_1390 <= grp_fu_739_p2;
                mul_ln55_13_reg_1395 <= grp_fu_743_p2;
                mul_ln55_14_reg_1400 <= grp_fu_747_p2;
                mul_ln55_1_reg_1335 <= grp_fu_695_p2;
                mul_ln55_2_reg_1340 <= grp_fu_699_p2;
                mul_ln55_3_reg_1345 <= grp_fu_703_p2;
                mul_ln55_4_reg_1350 <= grp_fu_707_p2;
                mul_ln55_5_reg_1355 <= grp_fu_711_p2;
                mul_ln55_6_reg_1360 <= grp_fu_715_p2;
                mul_ln55_7_reg_1365 <= grp_fu_719_p2;
                mul_ln55_8_reg_1370 <= grp_fu_723_p2;
                mul_ln55_9_reg_1375 <= grp_fu_727_p2;
                mul_ln55_reg_1330 <= grp_fu_691_p2;
                sum_1_reg_1435 <= sum_1_fu_961_p2;
                sum_reg_1325 <= grp_fu_687_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln39_reg_1156 <= icmp_ln39_fu_871_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    A_0_address0 <= zext_ln38_fu_801_p1(4 - 1 downto 0);

    A_0_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            A_0_ce0_local <= ap_const_logic_1;
        else 
            A_0_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    A_10_address0 <= zext_ln38_fu_801_p1(4 - 1 downto 0);

    A_10_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            A_10_ce0_local <= ap_const_logic_1;
        else 
            A_10_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    A_11_address0 <= zext_ln38_fu_801_p1(4 - 1 downto 0);

    A_11_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            A_11_ce0_local <= ap_const_logic_1;
        else 
            A_11_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    A_12_address0 <= zext_ln38_fu_801_p1(4 - 1 downto 0);

    A_12_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            A_12_ce0_local <= ap_const_logic_1;
        else 
            A_12_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    A_13_address0 <= zext_ln38_fu_801_p1(4 - 1 downto 0);

    A_13_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            A_13_ce0_local <= ap_const_logic_1;
        else 
            A_13_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    A_14_address0 <= zext_ln38_fu_801_p1(4 - 1 downto 0);

    A_14_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            A_14_ce0_local <= ap_const_logic_1;
        else 
            A_14_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    A_15_address0 <= zext_ln38_fu_801_p1(4 - 1 downto 0);

    A_15_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            A_15_ce0_local <= ap_const_logic_1;
        else 
            A_15_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    A_1_address0 <= zext_ln38_fu_801_p1(4 - 1 downto 0);

    A_1_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            A_1_ce0_local <= ap_const_logic_1;
        else 
            A_1_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    A_2_address0 <= zext_ln38_fu_801_p1(4 - 1 downto 0);

    A_2_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            A_2_ce0_local <= ap_const_logic_1;
        else 
            A_2_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    A_3_address0 <= zext_ln38_fu_801_p1(4 - 1 downto 0);

    A_3_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            A_3_ce0_local <= ap_const_logic_1;
        else 
            A_3_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    A_4_address0 <= zext_ln38_fu_801_p1(4 - 1 downto 0);

    A_4_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            A_4_ce0_local <= ap_const_logic_1;
        else 
            A_4_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    A_5_address0 <= zext_ln38_fu_801_p1(4 - 1 downto 0);

    A_5_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            A_5_ce0_local <= ap_const_logic_1;
        else 
            A_5_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    A_6_address0 <= zext_ln38_fu_801_p1(4 - 1 downto 0);

    A_6_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            A_6_ce0_local <= ap_const_logic_1;
        else 
            A_6_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    A_7_address0 <= zext_ln38_fu_801_p1(4 - 1 downto 0);

    A_7_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            A_7_ce0_local <= ap_const_logic_1;
        else 
            A_7_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    A_8_address0 <= zext_ln38_fu_801_p1(4 - 1 downto 0);

    A_8_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            A_8_ce0_local <= ap_const_logic_1;
        else 
            A_8_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    A_9_address0 <= zext_ln38_fu_801_p1(4 - 1 downto 0);

    A_9_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            A_9_ce0_local <= ap_const_logic_1;
        else 
            A_9_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    B_0_address0 <= zext_ln39_fu_829_p1(4 - 1 downto 0);

    B_0_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            B_0_ce0_local <= ap_const_logic_1;
        else 
            B_0_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    B_10_address0 <= zext_ln39_fu_829_p1(4 - 1 downto 0);

    B_10_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            B_10_ce0_local <= ap_const_logic_1;
        else 
            B_10_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    B_11_address0 <= zext_ln39_fu_829_p1(4 - 1 downto 0);

    B_11_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            B_11_ce0_local <= ap_const_logic_1;
        else 
            B_11_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    B_12_address0 <= zext_ln39_fu_829_p1(4 - 1 downto 0);

    B_12_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            B_12_ce0_local <= ap_const_logic_1;
        else 
            B_12_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    B_13_address0 <= zext_ln39_fu_829_p1(4 - 1 downto 0);

    B_13_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            B_13_ce0_local <= ap_const_logic_1;
        else 
            B_13_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    B_14_address0 <= zext_ln39_fu_829_p1(4 - 1 downto 0);

    B_14_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            B_14_ce0_local <= ap_const_logic_1;
        else 
            B_14_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    B_15_address0 <= zext_ln39_fu_829_p1(4 - 1 downto 0);

    B_15_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            B_15_ce0_local <= ap_const_logic_1;
        else 
            B_15_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    B_1_address0 <= zext_ln39_fu_829_p1(4 - 1 downto 0);

    B_1_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            B_1_ce0_local <= ap_const_logic_1;
        else 
            B_1_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    B_2_address0 <= zext_ln39_fu_829_p1(4 - 1 downto 0);

    B_2_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            B_2_ce0_local <= ap_const_logic_1;
        else 
            B_2_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    B_3_address0 <= zext_ln39_fu_829_p1(4 - 1 downto 0);

    B_3_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            B_3_ce0_local <= ap_const_logic_1;
        else 
            B_3_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    B_4_address0 <= zext_ln39_fu_829_p1(4 - 1 downto 0);

    B_4_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            B_4_ce0_local <= ap_const_logic_1;
        else 
            B_4_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    B_5_address0 <= zext_ln39_fu_829_p1(4 - 1 downto 0);

    B_5_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            B_5_ce0_local <= ap_const_logic_1;
        else 
            B_5_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    B_6_address0 <= zext_ln39_fu_829_p1(4 - 1 downto 0);

    B_6_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            B_6_ce0_local <= ap_const_logic_1;
        else 
            B_6_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    B_7_address0 <= zext_ln39_fu_829_p1(4 - 1 downto 0);

    B_7_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            B_7_ce0_local <= ap_const_logic_1;
        else 
            B_7_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    B_8_address0 <= zext_ln39_fu_829_p1(4 - 1 downto 0);

    B_8_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            B_8_ce0_local <= ap_const_logic_1;
        else 
            B_8_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    B_9_address0 <= zext_ln39_fu_829_p1(4 - 1 downto 0);

    B_9_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            B_9_ce0_local <= ap_const_logic_1;
        else 
            B_9_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    C_address0 <= zext_ln57_1_fu_966_p1(8 - 1 downto 0);

    C_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1)))) then 
            C_ce0_local <= ap_const_logic_1;
        else 
            C_ce0_local <= ap_const_logic_0;
        end if; 
    end process;


    C_we0_local_assign_proc : process(ap_enable_reg_pp0_iter7, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            C_we0_local <= ap_const_logic_1;
        else 
            C_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    add_ln38_1_fu_865_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten1_load) + unsigned(ap_const_lv8_1));
    add_ln38_fu_775_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i2_load) + unsigned(ap_const_lv5_1));
    add_ln55_10_fu_934_p2 <= std_logic_vector(unsigned(mul_ln55_11_reg_1385) + unsigned(mul_ln55_12_reg_1390));
    add_ln55_11_fu_938_p2 <= std_logic_vector(unsigned(mul_ln55_13_reg_1395) + unsigned(mul_ln55_14_reg_1400));
    add_ln55_12_fu_942_p2 <= std_logic_vector(unsigned(add_ln55_11_fu_938_p2) + unsigned(add_ln55_10_fu_934_p2));
    add_ln55_13_fu_952_p2 <= std_logic_vector(unsigned(add_ln55_12_reg_1425) + unsigned(add_ln55_9_fu_948_p2));
    add_ln55_1_fu_902_p2 <= std_logic_vector(unsigned(mul_ln55_1_reg_1335) + unsigned(mul_ln55_2_reg_1340));
    add_ln55_2_fu_906_p2 <= std_logic_vector(unsigned(add_ln55_1_fu_902_p2) + unsigned(add_ln55_fu_898_p2));
    add_ln55_3_fu_912_p2 <= std_logic_vector(unsigned(mul_ln55_3_reg_1345) + unsigned(mul_ln55_4_reg_1350));
    add_ln55_4_fu_916_p2 <= std_logic_vector(unsigned(mul_ln55_5_reg_1355) + unsigned(mul_ln55_6_reg_1360));
    add_ln55_5_fu_920_p2 <= std_logic_vector(unsigned(add_ln55_4_fu_916_p2) + unsigned(add_ln55_3_fu_912_p2));
    add_ln55_6_fu_957_p2 <= std_logic_vector(unsigned(add_ln55_5_reg_1410_pp0_iter5_reg) + unsigned(add_ln55_2_reg_1405_pp0_iter5_reg));
    add_ln55_7_fu_926_p2 <= std_logic_vector(unsigned(mul_ln55_7_reg_1365) + unsigned(mul_ln55_8_reg_1370));
    add_ln55_8_fu_930_p2 <= std_logic_vector(unsigned(mul_ln55_9_reg_1375) + unsigned(mul_ln55_10_reg_1380));
    add_ln55_9_fu_948_p2 <= std_logic_vector(unsigned(add_ln55_8_reg_1420) + unsigned(add_ln55_7_reg_1415));
    add_ln55_fu_898_p2 <= std_logic_vector(unsigned(mul_ln55_reg_1330) + unsigned(sum_reg_1325));
    add_ln57_fu_853_p2 <= std_logic_vector(unsigned(tmp_fu_821_p3) + unsigned(zext_ln57_fu_849_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_319_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
                ap_condition_319 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_982_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln38_reg_1161, ap_block_pp0_stage0)
    begin
                ap_condition_982 <= ((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln38_reg_1161 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln38_fu_877_p2)
    begin
        if (((icmp_ln38_fu_877_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter8_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter8_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_loop_exit_ready_delayed_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_loop_exit_ready_delayed <= ap_const_logic_1;
        else 
            ap_loop_exit_ready_delayed <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_icmp_ln394_phi_fu_680_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln39_reg_1156, ap_loop_init, ap_condition_982)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then
            if ((ap_const_boolean_1 = ap_condition_982)) then 
                ap_phi_mux_icmp_ln394_phi_fu_680_p4 <= icmp_ln39_reg_1156;
            elsif ((ap_loop_init = ap_const_logic_1)) then 
                ap_phi_mux_icmp_ln394_phi_fu_680_p4 <= ap_const_lv1_0;
            else 
                ap_phi_mux_icmp_ln394_phi_fu_680_p4 <= icmp_ln39_reg_1156;
            end if;
        else 
            ap_phi_mux_icmp_ln394_phi_fu_680_p4 <= icmp_ln39_reg_1156;
        end if; 
    end process;

    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_allocacmp_i2_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_loop_init, ap_block_pp0_stage0, i2_fu_240)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i2_load <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_i2_load <= i2_fu_240;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten1_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_loop_init, ap_block_pp0_stage0, indvar_flatten1_fu_236)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten1_load <= ap_const_lv8_0;
        else 
            ap_sig_allocacmp_indvar_flatten1_load <= indvar_flatten1_fu_236;
        end if; 
    end process;


    ap_sig_allocacmp_j3_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_loop_init, ap_block_pp0_stage0, j3_fu_244)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_j3_load <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_j3_load <= j3_fu_244;
        end if; 
    end process;

    i_fu_789_p3 <= 
        add_ln38_fu_775_p2 when (ap_phi_mux_icmp_ln394_phi_fu_680_p4(0) = '1') else 
        ap_sig_allocacmp_i2_load;
    icmp_ln38_fu_877_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten1_load = ap_const_lv8_FF) else "0";
    icmp_ln39_fu_871_p2 <= "1" when (j_fu_859_p2 = ap_const_lv5_10) else "0";
    j_fu_859_p2 <= std_logic_vector(unsigned(select_ln38_fu_781_p3) + unsigned(ap_const_lv5_1));
    select_ln38_fu_781_p3 <= 
        ap_const_lv5_0 when (ap_phi_mux_icmp_ln394_phi_fu_680_p4(0) = '1') else 
        ap_sig_allocacmp_j3_load;
    sum_1_fu_961_p2 <= std_logic_vector(unsigned(add_ln55_13_reg_1430) + unsigned(add_ln55_6_fu_957_p2));
    tmp_fu_821_p3 <= (trunc_ln38_fu_797_p1 & ap_const_lv4_0);
    trunc_ln38_fu_797_p1 <= i_fu_789_p3(4 - 1 downto 0);
    zext_ln38_fu_801_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_789_p3),64));
    zext_ln39_fu_829_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln38_fu_781_p3),64));
    zext_ln57_1_fu_966_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln57_reg_1071_pp0_iter6_reg),64));
    zext_ln57_fu_849_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln38_fu_781_p3),8));
end behav;
